// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: tdigest.proto
package com.squareup.digester.protos.tdigest;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Centroid extends Message<Centroid, Centroid.Builder> {
  public static final ProtoAdapter<Centroid> ADAPTER = new ProtoAdapter_Centroid();

  private static final long serialVersionUID = 0L;

  public static final Double DEFAULT_MEAN = 0.0d;

  public static final Double DEFAULT_WEIGHT = 0.0d;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double mean;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double weight;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
      label = WireField.Label.REPEATED
  )
  public final List<Double> samples;

  public Centroid(Double mean, Double weight, List<Double> samples) {
    this(mean, weight, samples, ByteString.EMPTY);
  }

  public Centroid(Double mean, Double weight, List<Double> samples, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.mean = mean;
    this.weight = weight;
    this.samples = Internal.immutableCopyOf("samples", samples);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.mean = mean;
    builder.weight = weight;
    builder.samples = Internal.copyOf("samples", samples);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Centroid)) return false;
    Centroid o = (Centroid) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(mean, o.mean)
        && Internal.equals(weight, o.weight)
        && samples.equals(o.samples);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (mean != null ? mean.hashCode() : 0);
      result = result * 37 + (weight != null ? weight.hashCode() : 0);
      result = result * 37 + samples.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (mean != null) builder.append(", mean=").append(mean);
    if (weight != null) builder.append(", weight=").append(weight);
    if (!samples.isEmpty()) builder.append(", samples=").append(samples);
    return builder.replace(0, 2, "Centroid{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Centroid, Builder> {
    public Double mean;

    public Double weight;

    public List<Double> samples;

    public Builder() {
      samples = Internal.newMutableList();
    }

    public Builder mean(Double mean) {
      this.mean = mean;
      return this;
    }

    public Builder weight(Double weight) {
      this.weight = weight;
      return this;
    }

    public Builder samples(List<Double> samples) {
      Internal.checkElementsNotNull(samples);
      this.samples = samples;
      return this;
    }

    @Override
    public Centroid build() {
      return new Centroid(mean, weight, samples, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Centroid extends ProtoAdapter<Centroid> {
    public ProtoAdapter_Centroid() {
      super(FieldEncoding.LENGTH_DELIMITED, Centroid.class);
    }

    @Override
    public int encodedSize(Centroid value) {
      return ProtoAdapter.DOUBLE.encodedSizeWithTag(1, value.mean)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.weight)
          + ProtoAdapter.DOUBLE.asRepeated().encodedSizeWithTag(3, value.samples)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Centroid value) throws IOException {
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.mean);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.weight);
      ProtoAdapter.DOUBLE.asRepeated().encodeWithTag(writer, 3, value.samples);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Centroid decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.mean(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 2: builder.weight(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 3: builder.samples.add(ProtoAdapter.DOUBLE.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Centroid redact(Centroid value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
