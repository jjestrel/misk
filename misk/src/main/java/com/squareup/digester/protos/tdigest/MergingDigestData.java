// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: tdigest.proto
package com.squareup.digester.protos.tdigest;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * MergingDigestData contains all fields necessary to generate a MergingDigest.
 * This type should generally just be used when serializing MergingDigest's,
 * and doesn't have much of a purpose on its own.
 *
 * Replica of stripe's tdigest implementation
 * https://github.com/stripe/veneur/blob/master/tdigest/tdigest.proto
 */
public final class MergingDigestData extends Message<MergingDigestData, MergingDigestData.Builder> {
  public static final ProtoAdapter<MergingDigestData> ADAPTER = new ProtoAdapter_MergingDigestData();

  private static final long serialVersionUID = 0L;

  public static final Double DEFAULT_COMPRESSION = 0.0d;

  public static final Double DEFAULT_MIN = 0.0d;

  public static final Double DEFAULT_MAX = 0.0d;

  @WireField(
      tag = 1,
      adapter = "com.squareup.digester.protos.tdigest.Centroid#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Centroid> main_centroids;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double compression;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double min;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double max;

  public MergingDigestData(List<Centroid> main_centroids, Double compression, Double min,
      Double max) {
    this(main_centroids, compression, min, max, ByteString.EMPTY);
  }

  public MergingDigestData(List<Centroid> main_centroids, Double compression, Double min,
      Double max, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.main_centroids = Internal.immutableCopyOf("main_centroids", main_centroids);
    this.compression = compression;
    this.min = min;
    this.max = max;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.main_centroids = Internal.copyOf("main_centroids", main_centroids);
    builder.compression = compression;
    builder.min = min;
    builder.max = max;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MergingDigestData)) return false;
    MergingDigestData o = (MergingDigestData) other;
    return unknownFields().equals(o.unknownFields())
        && main_centroids.equals(o.main_centroids)
        && Internal.equals(compression, o.compression)
        && Internal.equals(min, o.min)
        && Internal.equals(max, o.max);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + main_centroids.hashCode();
      result = result * 37 + (compression != null ? compression.hashCode() : 0);
      result = result * 37 + (min != null ? min.hashCode() : 0);
      result = result * 37 + (max != null ? max.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!main_centroids.isEmpty()) builder.append(", main_centroids=").append(main_centroids);
    if (compression != null) builder.append(", compression=").append(compression);
    if (min != null) builder.append(", min=").append(min);
    if (max != null) builder.append(", max=").append(max);
    return builder.replace(0, 2, "MergingDigestData{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MergingDigestData, Builder> {
    public List<Centroid> main_centroids;

    public Double compression;

    public Double min;

    public Double max;

    public Builder() {
      main_centroids = Internal.newMutableList();
    }

    public Builder main_centroids(List<Centroid> main_centroids) {
      Internal.checkElementsNotNull(main_centroids);
      this.main_centroids = main_centroids;
      return this;
    }

    public Builder compression(Double compression) {
      this.compression = compression;
      return this;
    }

    public Builder min(Double min) {
      this.min = min;
      return this;
    }

    public Builder max(Double max) {
      this.max = max;
      return this;
    }

    @Override
    public MergingDigestData build() {
      return new MergingDigestData(main_centroids, compression, min, max, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MergingDigestData extends ProtoAdapter<MergingDigestData> {
    public ProtoAdapter_MergingDigestData() {
      super(FieldEncoding.LENGTH_DELIMITED, MergingDigestData.class);
    }

    @Override
    public int encodedSize(MergingDigestData value) {
      return Centroid.ADAPTER.asRepeated().encodedSizeWithTag(1, value.main_centroids)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.compression)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(3, value.min)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.max)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MergingDigestData value) throws IOException {
      Centroid.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.main_centroids);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.compression);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.min);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.max);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MergingDigestData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.main_centroids.add(Centroid.ADAPTER.decode(reader)); break;
          case 2: builder.compression(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 3: builder.min(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 4: builder.max(ProtoAdapter.DOUBLE.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MergingDigestData redact(MergingDigestData value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.main_centroids, Centroid.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
